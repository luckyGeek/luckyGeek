<?xml version="1.0"?>
<project name="luckyGeek" default="release" basedir=".">
	<property file="build.properties"/>
	
	<property name="buildxml.home" value="." />
	<property name="src.dir" value="src" />
	<property name="test.dir" value="test" />
	<property name="build.dir" value="build" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="jar.dir" value="${build.dir}/jar" />
	<property name="lib.dir" value="lib" />
	<property name="conf.dir" value="conf" />
	<property name="log.dir" value="logs" />
	<property name="license.dir" value="licenses" />
	<property name="doc.dir" value="${build.dir}/doc" />
	<property name="dest.dir" value="${build.dir}/dest" />
	<property name="release.dir" value="${build.dir}/release" />
	<property name="report.dir" value="${build.dir}/junitreport" />

	<property name="test-all-class" value="de.verpeil.AllTests" />

	<property name="package" value="de.verpeil" />
	<property name="class-loader" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" />
	<property name="main-class" value="de.verpeil.Main" />
	<property name="manifest.main.class" value="${main-class}" />
	<property name="manifest.built.by" value="lucky geeks" />
	<property name="manifest.created.by" value="lucky geeks" />

	<property name="build.number" value="$Rev$" />
	<property name="release-name" value="${ant.project.name}-${version.number}" />
		
	<path id="classpath">
		<fileset dir="${buildxml.home}">
			<include name="${lib.dir}/*.jar"/>
			<exclude name="${lib.dir}/junit-*.jar"/>
		</fileset>
	</path>

	<path id="classpath.test">
		<fileset dir="${lib.dir}" includes="**/*.jar" />
		<fileset dir="${test.dir}" />
	</path>

	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${buildxml.home}/MANIFEST.MF" />
	</target>

	<target name="compile" depends="clean">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" optimize="on" failonerror="true" />
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*svn"/>
			</fileset>
		</copy>
	</target>

	<target name="jar" depends="compile">
		<mkdir dir="${jar.dir}" />
		<mkdir dir="${dest.dir}" />

		<pathconvert property="mf.classpath" pathsep=" " refid="classpath">
			<flattenmapper from="${lib.dir}" to="${ant.project.name}_${lib.dir}"/>
		</pathconvert>

		<tstamp />

		<manifest file="MANIFEST.MF">
			<attribute name="Built-By" value="${manifest.built.by}" />
			<attribute name="Created-By" value="${manifest.created.by}" />
			<attribute name="Implementation-Version" value="${version.number}-b${build.number}" />
			<attribute name="Built-Date" value="${TODAY}" />
			<attribute name="Main-Class" value="${main-class}"/>
			<attribute name="Class-Path" value=". ${mf.classpath}" />
		</manifest>

		<jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}" manifest="MANIFEST.MF">
			<zipfileset dir="${buildxml.home}">
				<include name="${conf.dir}/*"/>
				<include name="${log.dir}"/>
				<include name="${lib.dir}/"/>
			</zipfileset>
		</jar>
	</target>
	
	<target name="javadoc">
		<javadoc packagenames="${package}.*"
		           sourcepath="${src.dir}"
		           destdir="${doc.dir}" 
		           author="true"
		           version="true"
		           use="true"
		           windowtitle="Lucky Geek API"
			       access="package"
				   docencoding="UTF-8">
		    <doctitle><![CDATA[<h1>LuckyGeek</h1>]]></doctitle>
		    <bottom><![CDATA[<i>luckyGeek 2011.</i>]]></bottom>
		    <group title="Group 1 Packages" packages="${package}.*"/>
		    <link offline="true" href="http://sourceforge.net/p/luckygeek/home/Home/" packagelistLoc="."/>
		    <link href="http://sourceforge.net/p/luckygeek/home/Home/"/>
		  </javadoc>
	</target>

	<target name="prepare-release" depends="jar, javadoc">
		<copy todir="${dest.dir}">
			<fileset dir="${lib.dir}">
				<exclude name="junit*" />
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${jar.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${buildxml.home}">
				<include name="run.*"/>
				<include name="LICENSE*"/>
				<include name="README*"/>
				<include name="all.pdf" />
				<include name="last.pdf" />
				<include name="logging.*" />
				<include name="${conf.dir}/*" />
				<include name="${license.dir}/*"/>
				<include name="${log.dir}"/>
			</fileset>
		</copy>
	</target>
	
	<target name="release" description="builds release files" depends="prepare-release">
		<zip destfile="${release.dir}/${release-name}.zip" basedir="${dest.dir}" />
		<tar destfile="${release.dir}/${release-name}.tar.bz2" basedir="${dest.dir}" compression="bzip2" />
		
		<zip destfile="${release.dir}/${release-name}-src.zip" basedir="${dest.dir}">
			<zipfileset dir=".">
				<include name="${src.dir}/"/>
				<include name="${doc.dir}/" />
			</zipfileset>
		</zip>
		<tar destfile="${release.dir}/${release-name}-src.tar.bz2" basedir="${dest.dir}" compression="bzip2" >
			<zipfileset dir=".">
				<include name="${src.dir}/"/>
				<include name="${doc.dir}/" />
			</zipfileset>
		</tar>
	</target>

	<target name="run" description="executes jar">
		<java fork="true" classname="${main-class}">
			<classpath>
				<path location="${dest.dir}/${ant.project.name}.jar" />
			</classpath>
		</java>
	</target>
	
	<target name="compile-test" depends="clean, jar">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${test.dir}" destdir="${classes.dir}" classpathref="classpath.test" optimize="on" failonerror="true" />
		<copy todir="${classes.dir}">
			<fileset dir="${test.dir}">
				<exclude name="**/*.java"/>
				<exclude name="**/*svn"/>
			</fileset>
		</copy>
	</target>

	<target name="jar-test" depends="compile-test">
		<mkdir dir="${jar.dir}" />
		<pathconvert property="mf.classpath" pathsep=" " refid="classpath.test">
			<flattenmapper />
		</pathconvert>

		<jar destfile="${jar.dir}/${ant.project.name}-test.jar" basedir="${classes.dir}"/>
	</target>

	<target name="run-test">
		<java fork="true" classname="${main-class}">
			<classpath>
				<path refid="classpath" />
				<path id="application" location="${jar.dir}/${ant.project.name}-test.jar" />
			</classpath>
		</java>
	</target>

	<target name="junit" depends="jar-test">
		<mkdir dir="${report.dir}" />
		<junit printsummary="yes" haltonerror="false" haltonfailure="false">
			<classpath>
				<path refid="classpath.test" />
				<path location="${jar.dir}/${ant.project.name}-test.jar" />
				<pathelement path="${java.class.path}" />
			</classpath>

			<formatter type="xml" />

			<test name="${test-all-class}" haltonfailure="no" outfile="result">
				<formatter type="xml" />
			</test>

			<batchtest fork="yes" todir="${report.dir}">
				<fileset dir="${test.dir}">
					<include name="**/AllTests.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="junitreport" depends="junit" description="executes tests and generates report">
		<junitreport todir="${report.dir}">
			<fileset dir="${report.dir}" includes="TEST-*.xml" />
			<report todir="${report.dir}" />
		</junitreport>
	</target>
</project>
